name: Weekly Regression
on:
  # schedule:
  #   - cron:  '0 1 * * MON' # runs at 2am CET MONDAY
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  gh_issue_repo: duckdblabs/duckdb-internal
  mounted_directory_name: mount-point
  NIGHTLY_BUILD_FILE: nightly_builds_status

jobs:
  check-nightly-builds:
    name: Check Nightly Build failures
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install 
        shell: bash
        run: pip install duckdb pandas tabulate

      - name: Create run status report for nightly-builds on 'main'
        continue-on-error: true
        run: |
          # count consecutive failures and create a ${{ env.NIGHTLY_BUILD_FILE }}.md file
          python scripts/count_consecutive_failures.py

      - name: Upload nightly-build status
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ env.NIGHTLY_BUILD_FILE }}
          path: ${{ env.NIGHTLY_BUILD_FILE }}.md
          if-no-files-found: error

  start-runner:
    name: Start self-hosted ec2 runner
    runs-on: ubuntu-latest
    env:
      instance_id: i-0a6cd2153bfd28349

    steps:
      - name: Start EC2 runner
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_DEFAULT_REGION: us-east-1
        run: aws ec2 start-instances --instance-id ${{ env.instance_id }}

      - name: Create issue if failure
        shell: bash
        if: ${{ failure() && contains(github.ref_name, 'main') }}
        run: |
          gh issue create --repo ${{ env.gh_issue_repo }} --title "Weekly Regression Test Failure" --body "AWS box with instance-id ${{ env.instance_id }} could not be started"

  configure-mount-and-download-benchmark-data:
    name: Configure mount and download benchmark data
    needs: 
      - start-runner
    runs-on: self-hosted
    env:
      AWS_PROFILE: user1

    steps:
      - name: Install
        shell: bash
        run: sudo apt-get update -y -qq && sudo apt-get install -y -qq g++ ninja-build cmake make python-is-python3 libssl-dev pip gh jq python3-requests

      - name: umount mount-point (helps with debugging)
        shell: bash
        run: |
          if [ ! -d ${{ env.mounted_directory_name }} ] ; then 
            mkdir ${{ env.mounted_directory_name }}
            exit 0;
          fi 
          if mountpoint -q ${{ env.mounted_directory_name }} ; then
            # unmount mount-point. During debugging the mount can cause steps
            # to fail when copying duckdb-main to duckdb-old
            rm -rf ${{ env.mounted_directory_name }}/*
            sudo umount ${{ env.mounted_directory_name }}
          fi

      - name: Mount to instance storage
        shell: bash
        run: |
          # sometimes the mount point changes, by parsing the output of lsblk
          # we can always get the right mount point
          mount_name=$(sudo lsblk | awk 'NR > 1{
            size = $4;
            gsub(/MB/, "", size);
            gsub(/KB/, "", size);

            if (size ~ /M/) size /= 1024;       # Already in MB
            else if (size ~ /K/) size /= (1024*1024); # Convert KB to GB

            if (size > 800) print $1;
          }' | head -1)
          rm -rf ${{ env.mounted_directory_name }}
          sudo mkfs -t xfs -f /dev/$mount_name
          mkdir ${{ env.mounted_directory_name }}
          sudo mount /dev/$mount_name ${{ env.mounted_directory_name }}
          sudo chown -R ubuntu ${{ env.mounted_directory_name }}

      - name: Load data for sf100 benchmarks.
        shell: bash
        working-directory: ${{ env.mounted_directory_name}}
        run: |
          wget https://duckdb-blobs.s3.us-east-1.amazonaws.com/data/tpch-sf100.db -O tpch_sf100.duckdb
          # wget https://duckdb-blobs.s3.us-east-1.amazonaws.com/data/tpcds_sf100.db -O tpcds_sf100.duckdb 

  define-matrix:
    name: Define matrix of pairs
    needs: configure-mount-and-download-benchmark-data
    runs-on: self-hosted
    outputs:
      versions: ${{ steps.create-version-pairs.outputs.pairs }}

    steps:
      - name: Sparse-checkout repo with a script
        uses: actions/checkout@v4
        with:
          sparse-checkout: scripts/create_pairs_matrix.py
          path: ${{ env.mounted_directory_name }}/scripts

      - name: checkout duckdb
        uses: actions/checkout@v4
        with:
          repository: 'duckdb/duckdb'
          fetch-depth: 0
          path: ${{ env.mounted_directory_name}}/duckdb
      
      - name: create pairs.json
        working-directory: ${{ env.mounted_directory_name }}
        run: |
          mv scripts/scripts/create_pairs_matrix.py duckdb/scripts
          cd duckdb
          python scripts/create_pairs_matrix.py
      
      - name: move pairs.json
        run: mv ${{ env.mounted_directory_name }}/duckdb_previous_version_pairs.json .
          
      - name: Read JSON and create version pairs matrix
        working-directory: ${{ env.mounted_directory_name }}
        id: create-version-pairs
        run: |
          pairs=$(cat ../duckdb_previous_version_pairs.json | jq -c '.')
          echo "pairs=$pairs" >> $GITHUB_OUTPUT

  build-and-setup:
    name: BUILD - ${{ matrix.versions.new_name }} vs ${{ matrix.versions.old_name }}
    needs: 
      - define-matrix
      - configure-mount-and-download-benchmark-data
    strategy:
      matrix:
        versions: ${{ fromJSON(needs.define-matrix.outputs.versions) }}
      fail-fast: false
    runs-on: self-hosted
    env:
      GEN: ninja
      BUILD_BENCHMARK: 1
      BUILD_TPCH: 1
      BUILD_TPCDS: 1
      BUILD_JSON: 1
      BUILD_HTTPFS: 1
      BUILD_ICU: 1
      BUILD_JEMALLOC: 1
      CORE_EXTENSIONS: "inet"
      regression_output: regression_output.txt
    steps:
      - name: checkout duckdb-curr (${{ matrix.versions.new_name }})
        uses: actions/checkout@v4
        with:
          repository: 'duckdb/duckdb'
          ref: ${{ matrix.versions.new_sha }}
          fetch-depth: 0
          path: ${{ env.mounted_directory_name}}/duckdb-curr-${{ matrix.versions.new_name }}

      - name: checkout duckdb-old (${{ matrix.versions.old_name }})
        uses: actions/checkout@v4
        with:
          repository: 'duckdb/duckdb'
          ref: ${{ matrix.versions.old_sha }}
          fetch-depth: 0
          path: ${{ env.mounted_directory_name}}/duckdb-old-${{ matrix.versions.old_name }}

      - name: Build new (${{ matrix.versions.new_name }}) and old (${{ matrix.versions.old_name }})
        shell: bash
        working-directory: ${{ env.mounted_directory_name }}
        run: |
          cd duckdb-curr-${{ matrix.versions.new_name }} && make clean && make
          cd ..
          cd duckdb-old-${{ matrix.versions.old_name }} && make clean && make

      - name: Set up benchmarks 
        shell: bash
        working-directory: ${{ env.mounted_directory_name }}/duckdb-old-${{ matrix.versions.old_name }}
        run: |
          # we do this so new added benchmarks that break duckdb old
          # do not cause failures.
          rm -rf ../duckdb-curr-${{ matrix.versions.new_name }}/benchmark
          mkdir ../duckdb-curr-${{ matrix.versions.new_name }}/benchmark
          
          # set mem limit and threads to extension/tpch/dbgen/queries/ here:
          for q in "extension/tpch/dbgen/queries/"*; do
            sed -i '1i SET memory_limit = '\''16GB'\'';' "$q"
            sed -i '2i SET threads TO 8;' "$q"
          done
          cp -r benchmark ../duckdb-curr-${{ matrix.versions.new_name }}

      - name: Link duckdb-curr/duckdb_benchmark_data to tpch_sf100.duckdb and tpcds_sf100.duckdb
        shell: bash 
        working-directory: ${{ env.mounted_directory_name }}/duckdb-curr-${{ matrix.versions.new_name }}
        run: |
          # make sure there is no duckdb_benchmark_data left over from the previous run
          rm -rf duckdb_benchmark_data
          mkdir duckdb_benchmark_data
          cd duckdb_benchmark_data
          ln -s ${{ github.workspace }}/${{ env.mounted_directory_name }}/tpch_sf100.duckdb .
          # ln -s ${{ github.workspace }}/${{ env.mounted_directory_name }}/tpcds_sf100.duckdb .
          - name: Load data for sf100 benchmarks.
          shell: bash
          run: |
            wget https://duckdb-blobs.s3.us-east-1.amazonaws.com/data/tpch-sf100.db -O tpch_sf100.duckdb
            sudo du -sh /home/* /usr/* /opt/* 2>/dev/null | sort -hr | head -20
  
      - name: checkout duckdb-curr
        uses: actions/checkout@v4
        with:
          repository: 'duckdb/duckdb'
          ref: 'f027a66be019569c316599090158577ab342bf4f'
          path: duckdb

      - name: Build
        shell: bash
        run: |
          cd duckdb && make clean && make
          
      - name: Set up benchmarks 
        shell: bash
        run: |
          # mkdir duckdb/benchmark
          
          # set mem limit and threads to extension/tpch/dbgen/queries/ here:
          for q in "/duckdb/extension/tpch/dbgen/queries/"*; do
            sed -i '1i SET memory_limit = '\''16GB'\'';' "$q"
            sed -i '2i SET threads TO 8;' "$q"
          done

      - name: Link duckdb-curr/duckdb_benchmark_data to tpch_sf100.duckdb and tpcds_sf100.duckdb
        shell: bash 
        run: |
          # make sure there is no duckdb_benchmark_data left over from the previous run
          rm -rf duckdb_benchmark_data
          mkdir duckdb_benchmark_data
          cd duckdb_benchmark_data
          ln -s tpch_sf100.duckdb .
    
      - name: Run Regression Test
        continue-on-error: true
        shell: bash
        run: |
          export disable_timeout=""
          # tests=('large/tpch.csv' 'large/tpcds.csv')
          tests=('large/tpch.csv')
          
          for test in ${tests[@]}; do
            if [[ "${test}" == "large/tpcds.csv" ]]; then
                disable_timeout="--disable-timeout"
            fi  
            test_type=$(echo "${test}" | sed -e 's/\//_/g'  -e 's/\.csv//' )

            file_name="regression_output_${test_type}.txt"
            python duckdb/scripts/regression/test_runner.py duckdb/.github/regression/$test $disable_timeout \
              --verbose > "${file_name}"
          done
          
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: RESULTS
          path: regression_*.txt
          if-no-files-found: error