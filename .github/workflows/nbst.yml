name: Nightly Build Status
on:
  workflow_call:
    inputs:
      nightly-build:
        required: true
        type: string
      platform: 
        required: false
        type: string
      architecture: 
        required: true
        type: string
      runs-on:
        required: true
        type: string
    outputs:
      run_url:
        description: "Stores run URL."
        value: ${{ jobs.check-build.outputs.run_url }}
      run_conclusion: 
        description: "If nightly-build's conclusion."
        value: ${{ jobs.check-build.outputs.run_conclusion }}
      run_id:
        description: "Stores run id."
        value: ${{ jobs.check-build.outputs.run_id }}
env:
  GH_TOKEN: ${{ github.token }}
  GH_REPO: duckdb/duckdb
jobs:
  verify-build:
    runs-on: ${{ inputs.runs-on }}
    outputs:
      has_artifact: ${{ steps.verify-build.outputs.has_artifact }}
    steps:
        # Verify aarch64 builds in docker container
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/aarch64
        if: ${{ inputs.architecture == 'linux-aarch64' }}
      - name: Checkout the repo with the script
        uses: actions/checkout@v4
      - name: Install qemu dependencies
        if: ${{ inputs.architecture == 'linux-aarch64' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y libc6-arm64-cross qemu-user-static
      - name: Verify ${{ inputs.nightly-build }} version
        id: verify-build
        shell: bash
        run: |
          if [[ '${{ inputs.architecture }}' == 'linux-aarch64' ]]; then
            name="${{ inputs.architecture }}"
          else 
            name="${{ inputs.platform }}"
          fi

          echo "Downloading duckdb-binaries-$name artifact..."
          if gh run download ${{ inputs.run_id }} --repo ${{ env.GH_REPO }} -n duckdb-binaries-$name; then
            echo "Artifact duckdb-binaries-$name is successfuly downloaded."
            echo "has_artifact=true" >> $GITHUB_OUTPUT
            unzip duckdb_cli-${{ inputs.architecture }}.zip

            echo "Verifying version..."
            full_sha=$(gh run view ${{ inputs.run_id }} --repo ${{ env.GH_REPO }} --json headSha -q .headSha)
            if [[ ${{ inputs.architecture }} == linux-aarch64 ]]; then
              tmp_sha=$(docker run --rm --platform linux/aarch64 -v $(pwd):/duckdb -e full_sha=$full_sha ubuntu:22.04 /bin/bash -c 'cd /duckdb; ./duckdb --version')
            else
              tmp_sha=$(./duckdb --version)
            fi
            short_sha=$(echo $tmp_sha | awk -F' ' "{ print \$2 }")
            if [[ "$full_sha" != "$short_sha"* ]]; then
              printf "- The version of \`${{ inputs.nightly-build }}\` build (\`$short_sha\`) doesn't match to the version triggered the build (\`$full_sha\`).\n " > issue_body_${{ inputs.architecture }}.txt
              cat issue_body_${{ inputs.architecture }}.txt
              exit 1
            fi
          else  
            echo "Downloading duckdb-binaries-$name artifact is failed."
            printf "#### No artifacts with name duckdb-binaries-$name provided.\n" > issue_body_${{ inputs.architecture }}.txt
            cat issue_body_${{ inputs.architecture }}.txt
            echo "has_artifact=false" >> $GITHUB_OUTPUT
          fi
  check-build:
    runs-on: ${{ inputs.runs-on }}
    outputs:
      run_url: ${{ steps.get-url.outputs.run_url }}
      run_conclusion: ${{ steps.check-build.outputs.run_conclusion }}
      run_id: ${{ steps.get-run-id.outputs.run_id }}
    steps:
      - name: Checkout the repo with the script
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install DuckDB for Python
        shell: bash
        if: 
        run: |
          python -m pip install --upgrade pip
          pip install duckdb --pre --upgrade

      - name: Get run url ${{ inputs.nightly-build }} and a file with the runs list
        shell: bash
        id: get-url
        run: |
          echo "Listing ${{ inputs.nightly-build }} runs..."
          gh run list --repo ${{ env.GH_REPO }} --event repository_dispatch --workflow ${{ inputs.nightly-build }} --json status,conclusion,url,name,createdAt,databaseId,headSha > ${{ inputs.nightly-build }}.json 
          url=$(python -c "import duckdb; print()")
          url=$(python scripts/get_value_for_key.py ${{ inputs.nightly-build }}.json --key url)
          echo "run_url=$url" >> $GITHUB_OUTPUT
          echo "Got run URL: $url"
      
      - name: Check ${{ inputs.nightly-build }} build conclusion
        shell: bash
        id: check-build
        run: |
          conclusion=$(python scripts/get_value_for_key.py ${{ inputs.nightly-build }}.json --key conclusion)
          echo "run_conclusion=$conclusion" >> $GITHUB_OUTPUT

          echo "Got run conclusion: $conclusion"

      - name: Get ${{ inputs.nightly-build }} run ID
        shell: bash
        id: get-run-id
        run: |
          echo "Getting the run id..."
          run_id=$(python scripts/get_value_for_key.py ${{ inputs.nightly-build }}.json --key databaseId)
          echo "run_id=$run_id" >> $GITHUB_OUTPUT
          echo "Found run_id: $run_id"
      
      - name: Create ${{ inputs.nightly-build }} run status report
        shell: bash
        run: |
          echo "Getting the run info..."
          gh run view --repo ${{ env.GH_REPO }} ${{ steps.get-run-id.outputs.run_id}} --json jobs > ${{ inputs.nightly-build }}_run.json 
          echo "Getting the list of run artifacts..."
          gh api repos/${{ env.GH_REPO }}/actions/runs/${{ steps.get-run-id.outputs.run_id}}/artifacts > ${{ inputs.nightly-build }}_artifacts.json
          
          echo "Generating run status report..."
          # scripts/count_consecutive_failures.py creates a file named run_status_<nightly-build>.md with the run status report
          # containing information about available build artifacts
          python scripts/count_consecutive_failures.py ${{ inputs.nightly-build }}.json \
            --jobs ${{ inputs.nightly-build }}_run.json --artifacts ${{ inputs.nightly-build }}_artifacts.json \
            --nightly_build ${{ inputs.nightly-build }} --url ${{ steps.get-url.outputs.run_url }}

      - name: Upload Run Status file
        uses: actions/upload-artifact@v4
        with:
          name: run_status_${{ inputs.nightly-build }}
          path: run_status_${{ inputs.nightly-build }}.md
