name: Verify Nightly Build Version
on:
  workflow_call:
    inputs:
      nightly-build:
        required: true
        type: string
      platform: 
        required: false
        type: string
      architecture: 
        required: false
        type: string
      runs-on:
        required: false
        type: string
      run_id:
        required: false
        type: string
        
env:
  GH_TOKEN: ${{ github.token }}
  GH_REPO: duckdb/duckdb
jobs:
  check-build:
    runs-on: ${{ inputs.runs-on }}
    steps:
        # Verify aarch64 builds in docker container
      - name: Set up QEMU
        if: ${{ inputs.architecture == 'linux-aarch64' }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/aarch64
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install QEMU and duckdb dependencies
        if: ${{ inputs.architecture == 'linux-aarch64' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y libc6-arm64-cross qemu-user-static
          # set up QEMU for Docker
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker run --rm --platform linux/aarch64 ubuntu:22.04 uname -m

      
      - name: Install Python dependencies
        run: pip install pandas tabulate docker
      
      - name: Checkout the repo with the script
        uses: actions/checkout@v4
      - name: Checkout repo with extensions config file
        uses: actions/checkout@v4
        with:
          repository: duckdb/duckdb
          sparse-checkout: |
            .github/config
          path: ext
      - name: Verify and Test ${{ inputs.nightly-build }} version
        id: verify-build
        shell: bash
        run: |
          
          if [[ '${{ inputs.nightly-build }}' != 'Python' ]]; then
            if [[ '${{ inputs.architecture }}' == 'linux-aarch64' ]]; then
              name=${{ inputs.architecture }}
            else 
              name=${{ inputs.platform }}
            fi
            echo "Downloading duckdb-binaries-$name artifact..."
            if gh run download ${{ inputs.run_id }} --repo ${{ env.GH_REPO }} -n duckdb-binaries-$name; then
              echo "Artifact duckdb-binaries-$name is successfuly downloaded."
              unzip duckdb_cli-${{ inputs.architecture }}.zip -d duckdb_path
            fi
          else
            # for Python save the run information to get all python builds versions on verify_and_test.py
            gh run view --repo duckdb/duckdb $run_id -v > python_run_info.md
          fi

          echo "Verifying version and test extensions..."
          python scripts/verify_and_test.py \
            --nightly_build ${{ inputs.nightly-build }} --architecture ${{ inputs.architecture }} \
            --run_id ${{ inputs.run_id }} --runs_on ${{ inputs.runs-on }} \
            --config ext/.github/config/out_of_tree_extensions.cmake
          
      # - uses: owenthereal/action-upterm@v1
      #   if: inputs.architecture == 'linux-aarch64'
    
      - name: Upload actions for extensions
        uses: actions/upload-artifact@v4
        with:
          name: list_failed_ext_${{ inputs.nightly-build }}_${{ inputs.architecture }}
          path: list_failed_ext_${{ inputs.nightly-build }}_${{ inputs.architecture }}.md
          if-no-files-found: ignore
      
      # - uses: owenthereal/action-upterm@v1
      