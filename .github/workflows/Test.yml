name: Verify and Test
on:
  workflow_call:
  workflow_dispatch:
    inputs:
      nightly_build:
        required: true
        type: string
      platform: 
        required: true
        type: string
      architectures: 
        required: true
        type: string
      runs_on:
        required: true
        type: string
      run_id:
        required: true
        type: string
      calling_run_id:
        required: true
        type: string
      
env:
  GH_TOKEN: ${{ github.token }}
  GH_REPO: zuleykhapa/nbc
  GH_ARTIFACT_REPO: duckdb/duckdb
jobs:
    test:
        name: Verify and Test Builds ${{ inputs.nightly_build }} for architecture ${{ matrix.architecture }}, runs-on ${{ inputs.runs_on }}
        runs-on: ${{ matrix.runs_on }}
        continue-on-error: true
        strategy:
            matrix:
                architecture: ${{ fromJson(inputs.architectures) }}
                runs_on: ${{ fromJson(inputs.runs_on) }}
        steps:
          - run: |
              echo runs-on: ${{ matrix.runs_on }}
              echo architecture ${{ matrix.architecture }}
            # Verify aarch64 builds in docker container
          - name: Set up QEMU
            if: ${{ matrix.architecture == 'linux-aarch64' }}
            uses: docker/setup-qemu-action@v3
            with:
                platforms: linux/aarch64
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
                python-version: '3.10'
          - name: Install QEMU and duckdb dependencies
            if: ${{ matrix.architecture == 'linux-aarch64' }}
            shell: bash
            run: |
                sudo apt-get update
                sudo apt-get install -y libc6-arm64-cross qemu-user-static
                # set up QEMU for Docker
                docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
                docker run --rm --platform linux/aarch64 ubuntu:22.04 uname -m

                
          - name: Install Python dependencies
            run: pip install pandas tabulate docker
                
          - name: Checkout the repo with the script
            uses: actions/checkout@v4
            with:
                repository: ${{ env.GH_REPO }}
                sparse-checkout: scripts
                path: scripts
          - name: Checkout repo with extensions config file
            uses: actions/checkout@v4
            with:
                repository: duckdb/duckdb
                sparse-checkout: |
                    .github/config
                path: ext
  
          - name: List files in the directory
            run: |
                ls -R
                  
          - name: Verify and Test ${{ inputs.nightly_build }} version
            id: verify-build
            shell: bash
            run: |
                echo "Running tests for ${{ matrix.architecture }} on ${{ matrix.runs_on }}"
                if [[ '${{ inputs.nightly_build }}' != 'Python' ]]; then
                    # if [[ '${{ matrix.architecture }}' == 'linux-aarch64' ]]; then
                    #     name=${{ matrix.architecture }}
                    # else 
                    #     name=${{ inputs.platform}}
                    # fi
                    
                    name=${{ matrix.architecture }}
                    
                    echo "Downloading duckdb-binaries-$name artifact..."
                    if gh run download ${{ inputs.run_id }} --repo ${{ env.GH_ARTIFACT_REPO }} -n duckdb-binaries-$name; then
                        echo "Artifact duckdb-binaries-$name is successfuly downloaded."
                        if [[ '${{ inputs.nightly_build }}' == 'OSX' ]]; then
                            unzip duckdb_cli-*.zip -d duckdb_path
                        else
                            unzip duckdb_cli-$name.zip -d duckdb_path
                        fi
                        
                        ls duckdb_path
                        echo "Verifying version and test extensions..."
                        python scripts/scripts/verify_and_test.py \
                            --nightly_build ${{ inputs.nightly_build }} --architecture ${{ matrix.architecture }} \
                            --run_id ${{ inputs.run_id }} --runs_on ${{ inputs.runs_on }} \
                            --config ext/.github/config/out_of_tree_extensions.cmake
                    fi
                else
                    # for Python save the run information to get all python builds versions on verify_and_test.py
                    gh run view --repo duckdb/duckdb $run_id -v > python_run_info.md
                fi

                
                    
                # - uses: owenthereal/action-upterm@v1
                #   if: matrix.architecture == 'linux-aarch64'

          - name: Upload artifacts to workflow run with ID ${{ inputs.calling_run_id }}
            uses: actions/upload-artifact@v4
            with:
                name: ${{ inputs.calling_run_id }}_list_failed_ext_${{ inputs.nightly_build }}_${{ matrix.architecture }}
                path: list_failed_ext_${{ inputs.nightly_build }}_${{ matrix.architecture }}.md
                if-no-files-found: ignore