name: Create Report
on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      nightly-build:
        required: true
        type: string
      architecture:
        required: false
        type: string
      run_url:
        required: true
        type: string
env:
  GH_TOKEN: ${{ github.token }}
jobs:
  prepare-result:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo with the script
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Python dependencies
        run: |
          pip install duckdb pandas tabulate
      - name: Download build reports
        uses: actions/download-artifact@v4
        with:
          pattern: run_status_${{ inputs.nightly-build }}*
          path: run_status_${{ inputs.nightly-build }}
      - name: Download build verification results
        uses: actions/download-artifact@v4
        with:
          pattern: issue_verify_version_${{ inputs.platform }}*
          path: failures_${{ inputs.platform }}
      - name: Download extensions test results
        if: always()
        uses: actions/download-artifact@v4
        with:
          pattern: issue_ext_${{ inputs.platform }}*
          path: ext_failures_${{ inputs.platform }}
      - name: Prepare a result table with extensions
        shell: bash
        run: |
          # ext_failures_*/ are artifacts of the previous job and, for Python, produced by scripts/test_install_load_extensions.py
          if [ $(ls ext_failures_*/issue_ext_Py*/ | wc -l) -gt 0 ]; then
            echo "nightly_build,architecture,runs_on,version,extension,failed_statement" > result.csv
            cat ext_failures_${{ inputs.platform }}/issue_ext*/*.txt >> result.csv

            # scripts/prepare_report.py creates res_${{ inputs.platform }}.md file
            python scripts/prepare_report.py result.csv --platform ${{ inputs.platform }} --url ${{ inputs.run_url }}
            rm -r ext_failures_*/issue_ext_Py*/
          fi
          if [ $(ls ext_failures_*/issue_ext_*/ | wc -l) -gt 0 ]; then
            echo "nightly_build,architecture,runs_on,version,extension,failed_statement" > result.csv
            cat ext_failures_${{ inputs.platform }}/issue_ext*/*.txt >> result.csv

            # scripts/prepare_report.py creates res_${{ inputs.platform }}.md file
            python scripts/prepare_report.py result.csv --platform ${{ inputs.platform }} --url ${{ inputs.run_url }}
          fi
      - name: Create result file
        shell: bash
        if: always()
        run: |
          # run_status_*/ is an artifact of the Check Nightly Build Status workflow
          if [[ $(ls run_status_*/run_status*/ | wc -l) -gt 0 || -f res_${{ inputs.platform }}.md ]]; then
            echo "" > report_${{ inputs.platform }}.md
            echo "## ${{ inputs.nightly-build }}" >> report_${{ inputs.platform }}.md
            cat run_status_*/run_status*/* >> report_${{ inputs.platform }}.md
          fi
          # failures_*/ are artifacts of the Verify Nightly Build Version workflow
          if [ $(ls failures_*/issue_body*/ | wc -l) -gt 0 ]; then
            cat failures_${{ inputs.platform }}/issue_body*/* >> report_${{ inputs.platform }}.md
          fi
          # this adds the extensions part to the report
          if [ -f res_${{ inputs.platform }}.md ]; then
            cat res_${{ inputs.platform }}.md >> report_${{ inputs.platform }}.md
          fi
      - name: Upload result file
        uses: actions/upload-artifact@v4
        with:
          name: report_${{ inputs.platform }}
          path: report_${{ inputs.platform }}.md
