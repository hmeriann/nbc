name: Check Nightly Build Status
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  actions: write

env:
  GH_TOKEN: ${{ github.token }}
  GH_REPO: duckdb/duckdb
  GH_ISSUE_REPO: ${{ github.repository }}

jobs:
  get-run-info:
    runs-on: ubuntu-latest
    outputs:
      names_array: ${{ steps.names-array.outputs.names_array }}
    steps:
      - name: Checkout the repo with the script
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install DuckDB for Python
        shell: bash
        run: |
          # sudo apt-get update && sudo apt-get install -y jq
          python -m pip install --upgrade pip
          pip install duckdb --pre --upgrade
          pip install duckdb pandas tabulate requests
      
      - name: Generate inputs
        shell: bash
        run: |
          gh --version
          python scripts/create_build_report.py ${{ env.GH_TOKEN }}
      
      - name: Set names array matrix
        id: names-array
        shell: bash
        run: |
          matrix=$(python scripts/create_names_matrix.py)
          echo "ðŸ¦‘ $matrix"

          echo "names_array=$matrix" >> $GITHUB_OUTPUT
          
          # matrix=$(cat matrix.json)
          # removes whitespace and new lines:
          # matrix=$(echo $matrix | jq -c)
          # echo "matrix=$matrix" >> $GITHUB_OUTPUT

      - name: Upload DuckDB file
        uses: actions/upload-artifact@v4
        with:
          name: run_info_tables.duckdb
          path: run_info_tables.duckdb

      - name: Upload inputs
        uses: actions/upload-artifact@v4
        with:
          name: inputs
          path: inputs*.json

  set-matrix:
    name: Set inputs matrix and Run tests
    needs: get-run-info
    runs-on: ubuntu-latest
    outputs:
      nightly_build: ${{ steps.set-outputs.outputs.nightly_build }}
      platform: ${{ steps.set-outputs.outputs.platform }}
      architectures: ${{ steps.set-outputs.outputs.architectures }}
      runs_on: ${{ steps.set-outputs.outputs.runs_on }}
      run_id: ${{ steps.set-outputs.outputs.run_id }}
      CURR_DATE: ${{ steps.curr-date.outputs.date }}
    strategy:
      matrix: 
        names_array: ${{ fromJson(needs.get-run-info.outputs.names_array) }}
    steps:
      - name: Download input files
        uses: actions/download-artifact@v4
        with:
          name: inputs

      - id: curr-date
        run: echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      
      - name: Set outputs from ${{ matrix.names_array }}
        id: set-outputs
        run: |
          matrix=$(cat ${{ matrix.names_array }})

          nightly_build=$(echo $matrix | jq -r '.nightly_build')
          echo "nightly_build=$nightly_build" >> $GITHUB_OUTPUT

          platform=$(echo $matrix | jq -r '.platform')
          echo "platform=$platform" >> $GITHUB_OUTPUT

          architectures=$(echo $matrix | jq -r '.architectures')
          echo "architectures=$architectures" >> $GITHUB_OUTPUT
          
          nightly_build=$(echo $matrix | jq -r '.nightly_build')
          echo "nightly_build=$nightly_build" >> $GITHUB_OUTPUT
          
          runs_on=$(echo $matrix | jq -r '.runs_on')
          echo "runs_on=$runs_on" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.10'

      - name: Set up QEMU for aarch64 builds
        if: ${{ steps.set-outputs.outputs.architectures == 'linux-aarch64' }}
        uses: docker/setup-qemu-action@v3
        with:
            platforms: linux/aarch64
    
      - name: Install QEMU dependencies
        if: ${{ steps.set-outputs.outputs.architectures == 'linux-aarch64' }}
        shell: bash
        run: |
            sudo apt-get update
            sudo apt-get install -y libc6-arm64-cross qemu-user-static
            # set up QEMU for Docker
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            docker run --rm --platform linux/aarch64 ubuntu:22.04 uname -m
      
      - name: Pull docker image for win-arm64
        if: ${{ steps.set-outputs.outputs.architectures == 'windows-arm64' }}
        run: docker pull mcr.microsoft.com/windows/servercore:ltsc2022-arm64

      - name: Install Python dependencies
        run: pip install pandas tabulate docker
            
      - name: Checkout the repo with the script
        uses: actions/checkout@v4
        with:
            repository: ${{ env.GH_REPO }}
            sparse-checkout: scripts
            path: scripts

      - name: Checkout repo with extensions config file
        uses: actions/checkout@v4
        with:
            repository: duckdb/duckdb
            sparse-checkout: |
                .github/config
            path: ext
              
      - name: Verify and Test ${{ steps.set-outputs.outputs.nightly_build }} version
        id: verify-build
        shell: bash
        run: |
            docker --version
            
            echo "Running tests for ${{ steps.set-outputs.outputs.architectures }} on ${{ steps.set-outputs.outputs.runs_on }}"
            if [[ '${{ steps.set-outputs.outputs.nightly_build }}' != 'Python' ]]; then
                # if [[ '${{ steps.set-outputs.outputs.architectures }}' == 'linux-aarch64' ]]; then
                #     name=${{ steps.set-outputs.outputs.architectures }}
                # else 
                #     name=${{ steps.set-outputs.outputs.platform}}
                # fi
                
                name=${{ steps.set-outputs.outputs.architectures }}
                
                echo "Downloading duckdb-binaries-$name artifact..."
                if gh run download ${{ steps.set-outputs.outputs.run_id }} --repo ${{ env.GH_REPO }} -n duckdb-binaries-$name; then
                    echo "Artifact duckdb-binaries-$name is successfuly downloaded."
                    if [[ '${{ steps.set-outputs.outputs.nightly_build }}' == 'OSX' ]]; then
                        unzip duckdb_cli-*.zip -d duckdb_path
                    else
                        unzip duckdb_cli-$name.zip -d duckdb_path
                    fi
                    
                    ls duckdb_path
                    echo "Verifying version and testing extensions..."
                    python scripts/scripts/verify_and_test.py \
                        --nightly_build ${{ steps.set-outputs.outputs.nightly_build }} --platform ${{ steps.set-outputs.outputs.platform }} \
                        --architecture ${{ steps.set-outputs.outputs.architectures }} --run_id ${{ steps.set-outputs.outputs.run_id }} \
                        --runs_on ${{ steps.set-outputs.outputs.runs_on }} --config ext/.github/config/out_of_tree_extensions.cmake
                fi
            else
                # for Python save run information to get all python builds versions using verify_and_test.py
                python scripts/scripts/verify_and_test.py \
                        --nightly_build ${{ steps.set-outputs.outputs.nightly_build }} --platform ${{ steps.set-outputs.outputs.platform }} \
                        --architecture ${{ steps.set-outputs.outputs.architectures }} --run_id ${{ steps.set-outputs.outputs.run_id }} \
                        --runs_on ${{ steps.set-outputs.outputs.runs_on }} --config ext/.github/config/out_of_tree_extensions.cmake
            fi
          
      - name: Upload actions for extensions
        uses: actions/upload-artifact@v4
        with:
          name: list_failed_ext_${{ steps.set-outputs.outputs.nightly_build }}_${{ steps.set-outputs.outputs.architectures }}
          path: list_failed_ext_${{ steps.set-outputs.outputs.nightly_build }}_${{ steps.set-outputs.outputs.architectures }}.md
          if-no-files-found: ignore