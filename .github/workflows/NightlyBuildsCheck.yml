name: Check Nightly Build Status
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  actions: write

env:
  GH_TOKEN: ${{ github.token }}
  GH_REPO: duckdb/duckdb
  GH_ISSUE_REPO: ${{ github.repository }}

jobs:
  get-run-info:
    runs-on: ubuntu-latest
    outputs:
      names_array: ${{ steps.names-array.outputs.names_array }}
    steps:
      - name: Checkout the repo with the script
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install DuckDB for Python
        shell: bash
        run: |
          # sudo apt-get update && sudo apt-get install -y jq
          python -m pip install --upgrade pip
          pip install duckdb --pre --upgrade
          pip install duckdb pandas tabulate requests
      
      - name: Generate inputs
        shell: bash
        run: |
          gh --version
          python scripts/create_build_report.py ${{ env.GH_TOKEN }}
      
      - name: Set names array matrix
        id: names-array
        shell: bash
        run: |
          matrix=$(python scripts/create_names_matrix.py)
          echo "ðŸ¦‘ $matrix"

          echo "names_array=$matrix" >> $GITHUB_OUTPUT
          
          # matrix=$(cat matrix.json)
          # removes whitespace and new lines:
          # matrix=$(echo $matrix | jq -c)
          # echo "matrix=$matrix" >> $GITHUB_OUTPUT

      - name: Upload DuckDB file
        uses: actions/upload-artifact@v4
        with:
          name: run_info_tables.duckdb
          path: run_info_tables.duckdb

      - name: Upload inputs
        uses: actions/upload-artifact@v4
        with:
          name: inputs
          path: inputs*.json

  set-matrix:
    name: Set inputs matrix
    needs: get-run-info
    runs-on: ubuntu-latest
    outputs:
      nightly_build: ${{ steps.set-inputs.outputs.nightly_build }}
      platform: ${{ steps.set-inputs.outputs.platform }}
      architectures: ${{ steps.set-inputs.outputs.architectures }}
      runs_on: ${{ steps.set-inputs.outputs.runs_on }}
      run_id: ${{ steps.set-inputs.outputs.run_id }}
    strategy:
      matrix: ${{ fromJson(needs.get-run-info.outputs.names_array).include }}
    steps:
      - name: Set inputs from ${{ matrix.input_file }}
        id: set-inputs
        run: |
          matrix=$(cat ${{ fromJson(matrix.input_file) }})
          nightly_build=$(echo $matrix | jq -r '.[].nightly_build')
          echo "nightly_build=$nightly_build" >> $GITHUB_OUTPUT

          platform=$(echo $matrix | jq -r '.[].platform')
          echo "platform=$platform" >> $GITHUB_OUTPUT

          architectures=$(echo $matrix | jq -r '.[].architectures')
          echo "architectures=$architectures" >> $GITHUB_OUTPUT
          
          nightly_build=$(echo $matrix | jq -r '.[].nightly_build')
          echo "nightly_build=$nightly_build" >> $GITHUB_OUTPUT
          
          runs_on=$(echo $matrix | jq -r '.[].runs_on')
          echo "runs_on=$runs_on" >> $GITHUB_OUTPUT
  
  test:
    name: Verify and test 
    needs: set-matrix
    runs-on: ${{ needs.set-matrix.outputs.runs_on }}
    steps:
      - name: Trigger tests for ${{ needs.set-matrix.outputs.nightly_build }} on platform ${{ needs.set-matrix.outputs.platform }} with architecture ${{ needs.set-matrix.outputs.architectures }} 
        uses: ./Tests.yml
        with:
          nightly_build: ${{ needs.set-matrix.outputs.nightly_build }}
          platform: ${{ needs.set-matrix.outputs.platform }}
          architectures: ${{ needs.set-matrix.outputs.architectures }}
          runs_on: ${{ needs.set-matrix.outputs.runs_on }}
          run_id: ${{ needs.set-matrix.outputs.run_id }}

      #   - name: Install QEMU and duckdb dependencies
      #   if: ${{ matrix.architecture == 'linux-aarch64' }}
      #   shell: bash
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y libc6-arm64-cross qemu-user-static
      #     # set up QEMU for Docker
      #     docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      #     docker run --rm --platform linux/aarch64 ubuntu:22.04 uname -m

      # - name: Install Python dependencies
      #   run: pip install pandas tabulate docker
      
      # - name: Checkout the repo with the script
      #   uses: actions/checkout@v4
      # - name: Checkout repo with extensions config file
      #   uses: actions/checkout@v4
      #   with:
      #     repository: duckdb/duckdb
      #     sparse-checkout: |
      #       .github/config
      #     path: ext
      # - name: Verify and Test ${{ matrix.nightly_build }} version
      #   id: verify-build
      #   shell: bash
      #   run: |
      #     if [[ '${{ matrix.nightly_build }}' != 'Python' ]]; then
      #       if [[ '${{ matrix.architecture }}' == 'linux-aarch64' ]]; then
      #         name=${{ matrix.architecture }}
      #       else 
      #         name=${{ matrix.platform}}
      #       fi
      #       echo "Downloading duckdb-binaries-$name artifact..."
      #       if gh run download ${{ needs.get-run-info.outputs.run_id }} --repo ${{ env.GH_REPO }} -n duckdb-binaries-$name; then
      #         echo "Artifact duckdb-binaries-$name is successfuly downloaded."
      #         unzip duckdb_cli-${{ matrix.architecture }}.zip -d duckdb_path
      #       fi
      #     else
      #       # for Python save the run information to get all python builds versions on verify_and_test.py
      #       gh run view --repo duckdb/duckdb $run_id -v > python_run_info.md
      #     fi

      #     echo "Verifying version and test extensions..."
      #     python scripts/verify_and_test.py \
      #       --nightly_build ${{ matrix.nightly_build }} --architecture ${{ matrix.architecture }} \
      #       --run_id ${{ needs.get-run-info.outputs.run_id }} --runs_on ${{ needs.get-run-info.outputs.platform }}-latest \
      #       --config ext/.github/config/out_of_tree_extensions.cmake
          
      # - uses: owenthereal/action-upterm@v1
      #   if: matrix.architecture == 'linux-aarch64'
    
      - name: Upload actions for extensions
        uses: actions/upload-artifact@v4
        with:
          name: list_failed_ext_${{ needs.set-matrix.outputs.nightly_build }}_${{ needs.set-matrix.outputs.architectures }}
          path: list_failed_ext_${{ needs.set-matrix.outputs.nightly_build }}_${{ needs.set-matrix.outputs.architectures }}.md
          if-no-files-found: ignore
      
    