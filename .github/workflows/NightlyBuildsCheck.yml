name: Check Nightly Build Status
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  actions: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  GH_TOKEN: ${{ github.token }}
  GH_REPO: duckdb/duckdb
  GH_ISSUE_REPO: ${{ github.repository }}

jobs:
  get-run-info:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-outputs.outputs.matrix }}
    steps:
      - name: Checkout the repo with the script
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install DuckDB for Python
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install duckdb --pre --upgrade
          pip install duckdb pandas tabulate requests
      
      - name: Generate inputs
        shell: bash
        run: |
          gh --version
          python scripts/create_tables.py

      - name: Upload DuckDB file
        uses: actions/upload-artifact@v4
        with:
          name: run_info_tables.duckdb
          path: run_info_tables.duckdb
      
      - name: Read JSON and create matrix
        id: set-outputs
        run: |
          matrix=$(cat inputs.json | jq -c '.')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  run-tests:
    name: Verify ${{ matrix.inputs.nightly_build }} build and run test (${{ matrix.inputs.platform }} ${{ matrix.inputs.architectures }})
    needs: get-run-info
    if: ${{ needs.get-run-info.outputs.matrix != '[]' }}
    strategy:
      matrix:
        inputs: ${{ fromJson(needs.get-run-info.outputs.matrix) }}
    continue-on-error: true
    runs-on: ${{ matrix.inputs.runs_on }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.10'

      - name: Set up QEMU for aarch64 builds
        if: ${{ matrix.inputs.architectures == 'linux-aarch64' }}
        uses: docker/setup-qemu-action@v3
        with:
            platforms: linux/aarch64
    
      - name: Install QEMU dependencies
        if: ${{ matrix.inputs.architectures == 'linux-aarch64' }}
        shell: bash
        run: |
            sudo apt-get update
            sudo apt-get install -y libc6-arm64-cross qemu-user-static
            # set up QEMU for Docker
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            docker run --rm --platform linux/aarch64 ubuntu:22.04 uname -m

      - name: Install Python dependencies
        run: pip install pandas tabulate docker
            
      - name: Checkout the repo with the script
        uses: actions/checkout@v4
        with:
            repository: ${{ env.GH_ISSUE_REPO }}
            sparse-checkout: scripts
            path: scripts

      - name: Checkout repo with extensions config file
        uses: actions/checkout@v4
        with:
            repository: ${{ env.GH_REPO }}
            sparse-checkout: |
                .github/config
            path: ext
            
      - name: Verify and Test ${{ matrix.inputs.nightly_build }} version
        id: verify-build
        shell: bash
        run: |
            echo "Running tests for ${{ matrix.inputs.architectures }} on ${{ matrix.inputs.runs_on }}"
            if [[ '${{ matrix.inputs.nightly_build }}' != 'Python' ]]; then
              if [[ '${{ matrix.inputs.nightly_build }}' == 'OSX' ]]; then
                name='osx'
              elif [[ '${{ matrix.inputs.nightly_build }}' == 'Windows' ]]; then
                name=${{ matrix.inputs.platform }}-${{ matrix.inputs.architectures }}
              else
                name=${{ matrix.inputs.platform }}
              fi
              
              echo "Downloading duckdb-binaries-$name artifact..."
              # if gh run download ${{ matrix.inputs.run_id }} --repo ${{ env.GH_REPO }} -n duckdb-binaries-$name; then
              if gh run download 12021416084 --repo ${{ env.GH_REPO }} -n duckdb-binaries-$name; then
                  echo "Artifact duckdb-binaries-$name is successfuly downloaded."
                  unzip duckdb_cli-*.zip -d duckdb_path
                  
                  ls duckdb_path
                  echo "Verifying version and testing extensions..."
                  python scripts/scripts/verify_and_test.py \
                      --nightly_build ${{ matrix.inputs.nightly_build }} --platform ${{ matrix.inputs.platform }} \
                      --architecture ${{ matrix.inputs.architectures }} --run_id ${{ matrix.inputs.run_id }} \
                      --runs_on ${{ matrix.inputs.runs_on }} --config ext/.github/config/out_of_tree_extensions.cmake
              fi
            else
              # for Python save run information to get all python builds versions using verify_and_test.py
              python scripts/scripts/verify_and_test.py \
                      --nightly_build ${{ matrix.inputs.nightly_build }} --platform ${{ matrix.inputs.platform }} \
                      --architecture ${{ matrix.inputs.architectures }} --run_id ${{ matrix.inputs.run_id }} \
                      --runs_on ${{ matrix.inputs.runs_on }} --config ext/.github/config/out_of_tree_extensions.cmake
            fi

      - name: Upload actions for extensions
        uses: actions/upload-artifact@v4
        with:
          name: ext_${{ matrix.inputs.nightly_build }}_${{ matrix.inputs.architectures }}
          path: list_failed_ext_${{ matrix.inputs.nightly_build }}_${{ matrix.inputs.architectures }}.csv
          if-no-files-found: ignore
    
  report:
    name: Create complete report
    runs-on: ubuntu-latest
    if: always()
    needs: run-tests
    outputs:
      date: ${{ steps.curr-date.outputs.date }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install DuckDB for Python
        shell: bash
        run: |
          # sudo apt-get update && sudo apt-get install -y jq
          python -m pip install --upgrade pip
          pip install duckdb --pre --upgrade
          pip install duckdb pandas tabulate requests

      - name: Download extensions artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ext_*
          path: failed_ext

      - name: Download duckdb file
        uses: actions/download-artifact@v4
        with:
          name: run_info_tables.duckdb
          path: tables
      
      - name: Generate report
        shell: bash
        run: |
          python scripts/create_build_report.py
      
      - id: curr-date
        run: echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT

      - name: Upload REPORT
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.curr-date.outputs.date }}_REPORT_FILE
          path: ${{ steps.curr-date.outputs.date }}_REPORT_FILE.md

  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
