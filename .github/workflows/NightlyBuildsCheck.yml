name: Check Nightly Build Status
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  actions: write

env:
  GH_TOKEN: ${{ github.token }}
  GH_REPO: duckdb/duckdb
  GH_ISSUE_REPO: ${{ github.repository }}

jobs:
  get-run-info:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-outputs.outputs.matrix }}
    steps:
      - name: Checkout the repo with the script
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install DuckDB for Python
        shell: bash
        run: |
          # sudo apt-get update && sudo apt-get install -y jq
          python -m pip install --upgrade pip
          pip install duckdb --pre --upgrade
          pip install duckdb pandas tabulate requests
      
      - name: Generate inputs
        shell: bash
        run: |
          gh --version
          python scripts/create_build_report.py ${{ env.GH_TOKEN }}

      - name: Upload DuckDB file
        uses: actions/upload-artifact@v4
        with:
          name: run_info_tables.duckdb
          path: run_info_tables.duckdb

      - id: curr-date
        run: echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      
      - name: Read JSON and create matrix
        id: set-outputs
        run: |
          matrix=$(cat inputs.json | jq -c '.')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  run-tests:
    name: Verify ${{ matrix.inputs.nightly_build }} build and run test (${{ matrix.inputs.platform }} ${{ matrix.inputs.architectures }})
    needs: get-run-info
    strategy:
      matrix:
        inputs: ${{ fromJson(needs.get-run-info.outputs.matrix) }}
    continue-on-error: true
    runs-on: ${{ matrix.inputs.runs_on }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.10'

      - name: Set up QEMU for aarch64 builds
        if: ${{ matrix.inputs.architectures == 'linux-aarch64' }}
        uses: docker/setup-qemu-action@v3
        with:
            platforms: linux/aarch64
    
      - name: Install QEMU dependencies
        if: ${{ matrix.inputs.architectures == 'linux-aarch64' }}
        shell: bash
        run: |
            sudo apt-get update
            sudo apt-get install -y libc6-arm64-cross qemu-user-static
            # set up QEMU for Docker
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            docker run --rm --platform linux/aarch64 ubuntu:22.04 uname -m
      
      - name: Pull docker image for win-arm64
        if: ${{ matrix.inputs.architectures == 'windows-arm64' }}
        run: docker pull mcr.microsoft.com/windows/servercore:ltsc2022-arm64

      - name: Install Python dependencies
        run: pip install pandas tabulate docker
            
      # - name: Checkout the repo with the script
      #   uses: actions/checkout@v4
      #   with:
      #       repository: 
      #       sparse-checkout: scripts
      #       path: scripts

      - name: Checkout repo with extensions config file
        uses: actions/checkout@v4
        with:
            repository: ${{ env.GH_REPO }}
            sparse-checkout: |
                .github/config
            path: ext
      
      - uses: owenthereal/action-upterm@v1
      
      - name: Verify and Test ${{ matrix.inputs.nightly_build }} version
        id: verify-build
        shell: bash
        run: |
            docker --version

            ls -R scripts

            echo "Running tests for ${{ matrix.inputs.architectures }} on ${{ matrix.inputs.runs_on }}"
            if [[ '${{ matrix.inputs.nightly_build }}' != 'Python' ]]; then
              name=${{ matrix.inputs.architectures }}
              
              echo "Downloading duckdb-binaries-$name artifact..."
              if gh run download ${{ matrix.inputs.run_id }} --repo ${{ env.GH_REPO }} -n duckdb-binaries-$name; then
                  echo "Artifact duckdb-binaries-$name is successfuly downloaded."
                  if [[ '${{ matrix.inputs.nightly_build }}' == 'OSX' ]]; then
                      unzip duckdb_cli-*.zip -d duckdb_path
                  else
                      unzip duckdb_cli-$name.zip -d duckdb_path
                  fi
                  
                  ls duckdb_path
                  echo "Verifying version and testing extensions..."
                  python scripts/scripts/verify_and_test.py \
                      --nightly_build ${{ matrix.inputs.nightly_build }} --platform ${{ matrix.inputs.platform }} \
                      --architecture ${{ matrix.inputs.architectures }} --run_id ${{ matrix.inputs.run_id }} \
                      --runs_on ${{ matrix.inputs.runs_on }} --config ext/.github/config/out_of_tree_extensions.cmake
              fi
            else
              # for Python save run information to get all python builds versions using verify_and_test.py
              python scripts/scripts/verify_and_test.py \
                      --nightly_build ${{ matrix.inputs.nightly_build }} --platform ${{ matrix.inputs.platform }} \
                      --architecture ${{ matrix.inputs.architectures }} --run_id ${{ matrix.inputs.run_id }} \
                      --runs_on ${{ matrix.inputs.runs_on }} --config ext/.github/config/out_of_tree_extensions.cmake
            fi
          
      - name: Upload actions for extensions
        uses: actions/upload-artifact@v4
        with:
          name: list_failed_ext_${{ matrix.inputs.nightly_build }}_${{ matrix.inputs.architectures }}
          path: list_failed_ext_${{ matrix.inputs.nightly_build }}_${{ matrix.inputs.architectures }}.md
          if-no-files-found: ignore