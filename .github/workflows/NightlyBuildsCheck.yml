name: Check Nightly Build Status
on: 
  workflow_dispatch:
  push: 
    branches:
      - 'main'

permissions:
  contents: write
  issues: write

env:
  GH_REPO: duckdb/duckdb
  GH_ISSUE_REPO: ${{ github.repository }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  get-run-info:
    name: Create Tables and Generate Inputs
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-outputs.outputs.matrix }}
    steps:
      - name: Checkout the repo with the script
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install DuckDB for Python
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install duckdb --pre --upgrade
          pip install duckdb pandas tabulate requests
      
      - name: Generate inputs
        shell: bash
        run: |
          gh --version
          python scripts/create_tables.py

      - name: Upload DuckDB file
        uses: actions/upload-artifact@v4
        with:
          name: run_info_tables.duckdb
          path: run_info_tables.duckdb
      
      - name: Read JSON and create matrix
        id: set-outputs
        run: |
          matrix=$(cat inputs.json | jq -c '.')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  run-tests:
    name: Verify ${{ matrix.inputs.nightly_build }} - ${{ matrix.inputs.platform }} - ${{ matrix.inputs.architectures }} and test
    needs: get-run-info
    if: ${{ needs.get-run-info.outputs.matrix != '[]' }}
    strategy:
      matrix:
        inputs: ${{ fromJson(needs.get-run-info.outputs.matrix) }}
    continue-on-error: true
    runs-on: ${{ matrix.inputs.runs_on }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.10'

      - name: Set up QEMU for aarch64 builds
        if: ${{ matrix.inputs.architectures == 'linux-aarch64' }}
        uses: docker/setup-qemu-action@v3
        with:
            platforms: linux/aarch64
    
      - name: Install QEMU dependencies
        if: ${{ matrix.inputs.architectures == 'linux-aarch64' }}
        shell: bash
        run: |
            sudo apt-get update
            sudo apt-get install -y libc6-arm64-cross qemu-user-static
            # set up QEMU for Docker
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            docker run --rm --platform linux/aarch64 ubuntu:22.04 uname -m
            
      - name: Checkout the repo with the script
        uses: actions/checkout@v4

      - name: Checkout repo with extensions config file
        uses: actions/checkout@v4
        with:
            repository: ${{ env.GH_REPO }}
            sparse-checkout: |
                .github/config
            path: ext
      
      - name: Setup venv and Install requirements
        shell: bash
        run: | 
          # trace each command during execution
          set -x

          mkdir -p .venv

          python -m venv .venv
          if [[ '${{ matrix.inputs.nightly_build }}' == 'Windows' || '${{ matrix.inputs.runs_on }}' == 'windows-2019' ]]; then
            # Install pyenv-win on Windows
            git clone https://github.com/pyenv-win/pyenv-win.git $HOME/.pyenv
            .venv/Scripts/activate
          else
            curl https://pyenv.run | bash
            source .venv/bin/activate
          fi
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set-up docker for macos
        if: ${{ matrix.inputs.runs_on == 'macos-latest' }} && ${{ matrix.inputs.architecture == 'amd 64' }}
        shell: bash
        run: |
          open -a Docker
          while ! docker info > /dev/null 2>&1; do
            echo "Waiting for Docker to start..."
            sleep 1
          done
          docker --version
      #     brew install --cask docker
      # - name: Start Docker
      #   run: open /Applications/Docker.app
      # - name: Wait for Docker to Start
      #   run: |
      #     while ! docker info > /dev/null 2>&1; do sleep 1; done
            
      - name: Verify and Test ${{ matrix.inputs.nightly_build }} version
        id: verify-build
        shell: bash
        run: |
          if [[ '${{ matrix.inputs.nightly_build }}' == 'Windows' || '${{ matrix.inputs.runs_on }}' == 'windows-2019' ]]; then
            .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          echo "Running tests for ${{ matrix.inputs.architectures }} on ${{ matrix.inputs.runs_on }}"
          if [[ '${{ matrix.inputs.nightly_build }}' != 'Python' ]]; then
            if [[ '${{ matrix.inputs.nightly_build }}' == 'OSX' ]]; then
              name='osx'
            elif [[ '${{ matrix.inputs.nightly_build }}' == 'LinuxRelease' ]]; then
              name=${{ matrix.inputs.architectures }}
            else
              name=${{ matrix.inputs.architectures }}
            fi
            
            echo "Downloading duckdb-binaries-$name artifact..."
            if gh run download ${{ matrix.inputs.run_id }} --repo ${{ env.GH_REPO }} -n duckdb-binaries-$name; then
                echo "Artifact duckdb-binaries-$name is successfuly downloaded."
                unzip duckdb_cli-*.zip -d duckdb_path
            fi      
                ls duckdb_path
          fi
          echo "Verifying version and testing extensions..."
          python scripts/verify_and_test.py \
              --nightly_build ${{ matrix.inputs.nightly_build }} --platform ${{ matrix.inputs.platform }} \
              --architecture ${{ matrix.inputs.architectures }} --run_id ${{ matrix.inputs.run_id }} \
              --runs_on ${{ matrix.inputs.runs_on }} --config ext/.github/config/out_of_tree_extensions.cmake

      - name: Upload actions for extensions
        uses: actions/upload-artifact@v4
        with:
          name: ext_${{ matrix.inputs.nightly_build }}_${{ matrix.inputs.architectures }}
          path: list_failed_ext_${{ matrix.inputs.nightly_build }}_${{ matrix.inputs.architectures }}.csv
          if-no-files-found: ignore
    
  report:
    name: Create complete report
    runs-on: ubuntu-latest
    if: always()
    needs: run-tests
    outputs:
      date: ${{ steps.curr-date.outputs.date }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install DuckDB for Python
        shell: bash
        run: |
          # sudo apt-get update && sudo apt-get install -y jq
          python -m pip install --upgrade pip
          pip install duckdb --pre --upgrade
          pip install duckdb pandas tabulate requests

      - name: Download extensions artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ext_*
          path: failed_ext

      - name: Download duckdb file
        uses: actions/download-artifact@v4
        with:
          name: run_info_tables.duckdb
          path: tables
      
      - name: Generate report
        shell: bash
        run: |
          python scripts/create_build_report.py
      
      - id: curr-date
        run: echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      # - run: |
      #     git config --global user.name "github-actions[bot]"
      #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
      #     git add ${{ steps.curr-date.outputs.date }}_REPORT_FILE.md
      #     git commit -m "new file"
      #     git push origin main
      - name: Upload REPORT
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.curr-date.outputs.date }}_REPORT_FILE
          path: ${{ steps.curr-date.outputs.date }}_REPORT_FILE.md
